<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:flexlib="flexlib.containers.*"
	layout="absolute" width="800" height="600" windowComplete="init()"
	horizontalScrollPolicy="off" verticalScrollPolicy="off">
<mx:Script>
<![CDATA[
	import mx.managers.PopUpManager;
    import mx.containers.TitleWindow;
	import mx.utils.URLUtil;
	import flexlib.events.*;
	import mx.events.FlexEvent;
	import mx.events.IndexChangedEvent;
	import mx.events.MenuEvent;
	import mx.core.Container;
	import mx.containers.*;
	import mx.controls.Label;
	import mx.controls.HTML;
	import mx.controls.Text;
	import flexlib.controls.tabBarClasses.SuperTab;
	import mx.events.ListEvent;
	import flexlib.controls.CustomTreeItemRenderer;
	
	[Bindable]
	public var contexts:XML;
	public var homepage:String = "http://www.google.ca";
	public var contextFilename:String = "test.xml";
	public var currentListPos:int = -1;
	public var onPanel:Boolean = false;
	public var currentListData:XML = null;
	public var previousListData:XML = null;
	public var tempListData:XML = null;
	
	private var lastListIndex:int = -1;
	private var currentListIndex:int = -1;
	private var floatPanelCommentXML:XML;
	private var floatPanelTimer:Timer;
	
	
	[Embed(source="./flexlib/assets/document.png")]
	private static const document_icon:Class;
	[Embed(source="./flexlib/assets/home.png")]
	private static const home_icon:Class;
	[Embed(source="icons/action_back.gif")]
    private static const backIcon:Class; 
    [Embed(source="icons/action_forward.gif")]
    private static const forwardIcon:Class; 
    [Embed(source="icons/action_refresh.gif")]
    private static const refreshIcon:Class; 
    [Embed(source="icons/action_stop.gif")]
    private static const stopIcon:Class;
    [Embed(source="icons/icon_home.gif")]
    private static const homeIcon:Class;
    [Embed(source="icons/action_go.gif")]
    private static const goIcon:Class;

	private var xmlToShare:XML;

	private function randNum():Number
	{
		return Math.floor(Math.random() * (100000));		
	}

    public function setupDragClipboardForTree(e:NativeDragEvent):void
    {
    	var htmlString:String = "";
    	var textString:String = "";
    	var selectedNode:XML = e.currentTarget.selectedItem;
    	if(selectedNode.localName() == "context")
    	{
    		htmlString += "<h3>" + "Context Name: " + selectedNode.@label + "</h3>";
    		textString += "Context Name: " + selectedNode.@label + "\n\n";
	    	
	    	htmlString += "<h3>" + "Tabs: " + "</h3>";
            textString += "Tabs: " + "\n";
	    	
	    	var tabs:XMLList = selectedNode.tabs.tab;
	    	if(tabs.length() == 0)
	    	{
	    		htmlString += "(None)" + "<br>";
                textString += "\t" + "(None)" + "\n";
	    	} else
	    	{
		    	for each(var tab:XML in tabs)
		    	{
		    		htmlString += "\t" + tab.@label+ ": <a href=\"" + tab.@address + "\">" + tab.@address + "</a><br>";
		    		textString += "\t" + tab.@label + ": " + tab.@address + "\n";
		    	}
		    }
	    	
	    	htmlString += "<br>" + "<h3>" + "Bookmarks: " + "</h3>";
            textString += "\n"   + "Bookmarks: " + "\n";
            
            var bookmarks:XMLList = selectedNode.bookmarks.bookmark;
            if(bookmarks.length() == 0)
            {
                htmlString += "(None)" + "<br>";
                textString += "\t" + "(None)" + "\n";
            } else
            {
	            for each(var bookmark:XML in bookmarks)
	            {
	                htmlString += "\t" + bookmark.@label+ ": <a href=\"" + bookmark.@address + "\">" + bookmark.@address + "</a><br><br>";
	                textString += "\t" + bookmark.@label + ": " + bookmark.@address + "\n\n";
	            }
	        }
	    } else if(selectedNode.localName() == "tabs")
	    {
	    	htmlString += "<h3>" + "Tabs: " + "</h3>";
            textString += "Tabs: " + "\n";
	    	
	        tabs = selectedNode.tab;
            if(tabs.length() == 0)
            {
                htmlString += "(None)" + "<br>";
                textString += "\t" + "(None)" + "\n";
            } else
            {
                for each(tab in tabs)
                {
                    htmlString += "\t" + tab.@label+ ": <a href=\"" + tab.@address + "\">" + tab.@address + "</a><br>";
                    textString += "\t" + tab.@label + ": " + tab.@address + "\n";
                }
            }
	    } else if(selectedNode.localName() == "tab")
	    {
	    	tab = selectedNode;
	    	htmlString += "\t" + tab.@label+ ": <a href=\"" + tab.@address + "\">" + tab.@address + "</a><br>";
            textString += "\t" + tab.@label + ": " + tab.@address + "\n";
	    }

        e.clipboard.setData(ClipboardFormats.HTML_FORMAT, htmlString);
        e.clipboard.setData(ClipboardFormats.TEXT_FORMAT, textString);
    }    
    
	// function to handle all context menu events
	public function contextMenuEventHandler(e:RightClickMenuEvent): void
	{
		trace(e.clickedItem);
		var contextIndex:Number;
		// right click menu handler
		switch(e.clickedItem)
		{
			case "Add Context":
				contextTabBar.dispatchEvent(new Event(SuperTabNavigator.AddTabEvent));
				break;
			case "Add Tab":
				getCurrentTabNavigator().dispatchEvent(new Event(SuperTabNavigator.AddTabEvent));
				break;
			case "Rename Context":
				e.clickedTab.editableLabel= true;
				break;
			case "Hibernate Context":
			case "Close Tab":
				e.clickedTab.dispatchEvent(new Event(SuperTab.CLOSE_TAB_EVENT));
				break;
			case "Bookmark Tab":
				var tabIndex:Number = getCurrentTabNavigator().getTabBar().getChildIndex(e.clickedTab);
				var tabAddress:String = Tab(getCurrentTabNavigator().getChildAt(tabIndex)).htmlPane.location;
				addBookmarkToContext(Context(contextTabBar.selectedChild), e.clickedTab.label, tabAddress);
				break;	
			case "Delete Context":
				contextIndex = contextTabBar.getTabBar().getChildIndex(e.clickedTab);
				var xmlToDelete:XML = Context(contextTabBar.getChildAt(contextIndex)).xmlRef;
				
				e.clickedTab.dispatchEvent(new Event(SuperTab.CLOSE_TAB_EVENT));
				searchAndDeleteXML(xmlToDelete);
				break;
			case "Share Context":
				var filePopup:ShareFileWindow=ShareFileWindow(PopUpManager.createPopUp( this, ShareFileWindow , true));
             	PopUpManager.centerPopUp(filePopup);
                filePopup.handler = shareContext;
				
				// context xml to be shared
				contextIndex = contextTabBar.getTabBar().getChildIndex(e.clickedTab);
				xmlToShare = Context(contextTabBar.getChildAt(contextIndex)).xmlRef;
				break;
		}
		
	}
	
	public function downloadContext():void
	{
		var filePopup:ShareFileWindow=ShareFileWindow(PopUpManager.createPopUp( this, ShareFileWindow , true));
     	PopUpManager.centerPopUp(filePopup);
        filePopup.handler = addXMLToContext;
        return;
	}
	
	public function addXMLToContext(fileName:String):void
	{
		var xmlURL:URLRequest = new URLRequest();
		xmlURL.url = ("http://www.shiufai.net/cs544/" + fileName);
		var xmlLoader:URLLoader = new URLLoader();
		xmlLoader.addEventListener(IOErrorEvent.IO_ERROR, function():void{});
		xmlLoader.addEventListener(Event.COMPLETE, downloadCompleteHandler);
		try 
		{
			xmlLoader.load(xmlURL);
		} catch (e:Error) {}
	}
	
	private function downloadCompleteHandler(event:Event):void
	{
		contexts.appendChild(XML(event.target.data));
		activateContextAndTab(contexts.children()[contexts.children().length()-1]);
		treeInactive.dataProvider=contexts.context.(@active == 'false');
		treeActive.dataProvider=contexts.context.(@active == 'true');
		trace(event.target.data);
	}
	
	public function shareContext(fileName:String):void
	{
		var applicationDirectoryPath:File = File.applicationDirectory;
		var nativePathToApplicationDirectory:String = applicationDirectoryPath.nativePath.toString();
		nativePathToApplicationDirectory += "/" + fileName;
		var file:File = new File(nativePathToApplicationDirectory);
        var fileStream:FileStream = new FileStream();
        fileStream.open(file, FileMode.WRITE);
        fileStream.writeUTFBytes(xmlToShare.toXMLString());
        fileStream.close();
        		
		var urlRequest:URLRequest = new URLRequest("http://www.shiufai.net/cs544/upload.php");
		file.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA, uploadCompleteHandler);
		file.addEventListener(Event.COMPLETE, uploadCompleteHandler);
		file.upload(urlRequest);
		trace(xmlToShare.toString());
	}
	
	private function uploadCompleteHandler(event:Event):void 
	{
		trace( "File Uploaded: " + event.target.name);
		var file:File = new File(File.applicationDirectory.nativePath.toString() + "/" + event.target.name);
		file.deleteFile();
	}
		
	public function sideBarMenuHandler(e:SideBarMenuEvent):void
	{
		switch(e.type)
		{
			case SideBarMenuEvent.SIDEBAR_DELETE:
				for each(var obj_context:Object in contextTabBar.getChildren())
				{
					var c:Context = Context(obj_context);
					
					// if deleting the entire context
					if (c.xmlRef == e.xmlObject)
					{
						contextTabBar.removeChild(c);
						searchAndDeleteXML(e.xmlObject);	
						break;
					}
					
					var cn:XMLList = c.xmlRef.children();
					for ( var i:Number = 0 ; i < cn.length() ; i++ )
					{
						if ( cn[i] == e.xmlObject )
						{
			       			contextTabBar.removeChild(c);
   							searchAndDeleteXML(e.xmlObject);
			       			break;
						}
					}    
		
					// if deleting one single tab
					for each (var obj_tab:Object in c.navigator.getChildren())
					{
						var t:Tab = Tab(obj_tab);
						
						if (t.xmlObject == e.xmlObject)
						{
							c.navigator.removeChild(t);
   							searchAndDeleteXML(e.xmlObject);
							break;
						}
					}
				}	
   				searchAndDeleteXML(e.xmlObject);
				break;
		}
	}
	
	public function searchAndDeleteXML(xmlToDelete:XML):void
	{
		var cn:XMLList = contexts.descendants();
     
		for ( var i:Number = 0 ; i < cn.length() ; i++ )
		{
			if ( cn[i] == xmlToDelete )
			{
       			delete cn[i];   
       			break;
			}
		}
		
		treeInactive.dataProvider=contexts.context.(@active == 'false');
		treeActive.dataProvider=contexts.context.(@active == 'true');    		
	}
	
	public function init():void
	{
		//save before exiting
		NativeApplication.nativeApplication.addEventListener(Event.EXITING, applicationExitHandler);
		
		contextTabBar.dragEnabled = false;
		contextTabBar.dropEnabled = false;
		contextTabBar.setType(SuperTabNavigator.CONTEXT, contextMenuEventHandler);
		contextTabBar.addEventListener(SuperTabNavigator.AddTabEvent, addContextWithTabBarButton);
		contextTabBar.addEventListener(IndexChangedEvent.CHANGE, updateAddressBar);
		contextTabBar.addEventListener(SuperTabEvent.TAB_CLOSE, contextClose);
	
		contextTabBar.addEventListener(SuperTabEvent.TAB_UPDATED, contextTabRenamed);
		
		loadContexts();
		initContexts();
		
		floatPanelTimer = new Timer(500);
		floatPanelTimer.addEventListener(TimerEvent.TIMER, floatPanelTimerTimeout);
		floatPanelTimer.start();

		treeActive.addEventListener(SideBarMenuEvent.SIDEBAR_DELETE, sideBarMenuHandler);
		treeInactive.addEventListener(SideBarMenuEvent.SIDEBAR_DELETE, sideBarMenuHandler);
				
	}
	
	public function applicationExitHandler(e:Event):void
	{
		saveContexts();
	}
	
	public function loadContexts():void
	{
		var file:File = File.applicationDirectory.resolvePath(contextFilename);
        var fileStream:FileStream = new FileStream();
        if( file.exists )
        {
	        fileStream.open(file, FileMode.READ);
	        var stringRead:String = fileStream.readUTFBytes(fileStream.bytesAvailable);
	        contexts = XML(stringRead);
	        fileStream.close();
        }
        else 
        {
        	contexts = new XML("<contexts />");
        }        
	}
	
	public function saveContexts():void
	{
		var applicationDirectoryPath:File = File.applicationDirectory;
		var nativePathToApplicationDirectory:String = applicationDirectoryPath.nativePath.toString();
		nativePathToApplicationDirectory += "/" + contextFilename;
		var file:File = new File(nativePathToApplicationDirectory);
        var fileStream:FileStream = new FileStream();
        fileStream.open(file, FileMode.WRITE);
        fileStream.writeUTFBytes(contexts.toXMLString());
        fileStream.close();
 	}
 
	public function initContexts():void
	{
		var activeContexts:XMLList = contexts.context.(@active == 'true');
		if( activeContexts.length() == 0 )
		{
			var newContextXML:XML = <context active="true" label="Default"><tabs label="Tabs"/></context>; 
			contexts.appendChild(newContextXML);
    		var defaultContext:Context = addContext("Default", newContextXML);
    		var newTabXML:XML =new XML("<tab label=\"" + homepage + "\" address=\"" + homepage + "\" id=\"" + randNum().toString() +"\" />") 
    		newContextXML.tabs[0].appendChild(newTabXML);
    		addTab(newTabXML, defaultContext.navigator);
        } else
        {
        	for each (var activeContext:XML in activeContexts)
        	{
                var currentContext:Context = addContext(activeContext.@label, activeContext);
                for each (var tab:XML in activeContext.tabs.tab)
                {
                	addTab(tab, currentContext.navigator);
                }
        	}
        }
	}
	
	public function getParentWithLocalName(localName:String, object:XML):XML
	{
		while (object.localName() != localName)
		{
			object = object.parent();
			if (object == null)
 				break;
		}
 			
		return object;
	}
	
	public function focusContextAndTab(target:XML):void
	{
		var data:XML = target;
		
		for each(var obj_context:Object in contextTabBar.getChildren())
		{
			var c:Context = Context(obj_context);
			
			// if you clicked a context
			if (c.xmlRef == data)
			{
				contextTabBar.selectedChild = c;
				return;
			}
			
			for each (var obj_tab:Object in c.navigator.getChildren())
			{
				var t:Tab = Tab(obj_tab);
				
				// found the target
				if (t.xmlObject == data)
				{
					contextTabBar.selectedChild = c;
					c.navigator.selectedChild = t;
					return;
				}
			}
		}	
	}
	
	public function activeTreeItemDoubleClicked(e:ListEvent):void
	{
		var data:XML = XML(e.itemRenderer.data);
	
		if (data.localName() == "context" || data.localName() == "tab")
		{
			focusContextAndTab(data);
		}
		
		if (data.localName() == "bookmark")
		{
 			var context:XML = data;
 			
 			context = getParentWithLocalName("context", data);
 			if (context == null) return;
 			
 			focusContextAndTab(context);
 			addNewTabToCurrentContext(data.@address);
		}
	
	}
	
	public function focusAfterCreation(e:FlexEvent):void
	{
		if (e.target is Tab)
		{
			var t:Tab = Tab(e.target);
			SuperTabNavigator(t.parent).selectedChild = t;
		}
		
		if (e.target is Context)
		{
			var c:Context = Context(e.target);
			SuperTabNavigator(c.parent).selectedChild = c;
		}
	}
	
	public function activateContextAndTab(node:XML): Context
	{
 		var context:XML = node;
 		
 		
 		context = getParentWithLocalName("context", context);
 		if (context == null) return null;
 		
        var currentContext:Context = addContext(context.@label, context);
        currentContext.addEventListener(mx.events.FlexEvent.CREATION_COMPLETE, focusAfterCreation);
       
        for each (var tab:XML in context.tabs.tab)
        {
        	var tabpage:Tab = addTab(tab, currentContext.navigator);
        	if (tab==node)
        	{
        		tabpage.addEventListener(mx.events.FlexEvent.CREATION_COMPLETE, focusAfterCreation);
        	}   
        }

		context.@active="true";  
		
		return currentContext;
	}
	
	public function openTabAfterCreation(e:FlexEvent):void
	{
		if (e.target is Context)
		{
			var c:Context = e.target as Context;
			if (c.addressToOpen != "")
			{
				addNewTabToContext(c, c.addressToOpen);
				c.addressToOpen = "";
			}
		}
	}
	
	public function inactiveTreeItemDoubleClicked(e:ListEvent):void
    {
		var data:XML = XML(e.itemRenderer.data);
	
		if (data.localName() == "context" || data.localName() == "tab")
		{
			activateContextAndTab(data);
		}
		
		if (data.localName() == "bookmark")
		{
 			var context:XML = data;
 			
 			context = getParentWithLocalName("context", data);
 			if (context == null) return;
 			
 			var activatedContext:Context = activateContextAndTab(context);
 			if (activatedContext == null) return;
 			
 			activatedContext.addressToOpen = data.@address;
 			activatedContext.addEventListener(mx.events.FlexEvent.CREATION_COMPLETE, openTabAfterCreation);
			
		}


   }
	
	public function addContextWithTabBarButton(e:Event):void
	{
		var newContextXML:XML = <context active="true" label="New Group"><tabs label="Tabs"/></context>; 
        contexts.appendChild(newContextXML);
		var newContext:Context = addContext("New Group", newContextXML);
		
		var newTabXML:XML =new XML("<tab label=\"" + homepage + "\" address=\"" + homepage + "\" id=\"" + randNum().toString() +"\" />");
        newContextXML.tabs[0].appendChild(newTabXML);
        addTab(newTabXML, newContext.navigator);
		
		// set context focus
		contextTabBar.selectedIndex = contextTabBar.numChildren-1;
		
		treeInactive.dataProvider=contexts.context.(@active == 'false');
		treeActive.dataProvider=contexts.context.(@active == 'true');
	}
	
	public function getCurrentTabNavigator():SuperTabNavigator
	{
		return Context(contextTabBar.selectedChild).navigator;
	}
	
	public function getCurrentTab():Tab
	{
		return Tab(getCurrentTabNavigator().selectedChild);
	}
	
	public function addBookmarkToContext(context:Context, label:String, address:String): void
	{
		var newBookmarkXML:XML = new XML("<bookmark label=\"" + label + "\" address=\"" + address + "\" id=\"" + randNum().toString() +"\" />"); 
		
		if(context.xmlRef.bookmarks.length() == 0)
			context.xmlRef.appendChild(new XML("<bookmarks label=\"Bookmarks\"/>"));
        context.xmlRef.bookmarks[0].appendChild(newBookmarkXML);
        
		treeInactive.dataProvider=contexts.context.(@active == 'false');
		treeActive.dataProvider=contexts.context.(@active == 'true'); 
	}
	
	public function addNewTabToContext(context:Context, address:String):void
	{
		var newTabXML:XML = new XML("<tab label=\"" + address + "\" address=\"" + address + "\" id=\"" + randNum().toString() +"\" />"); 
        context.xmlRef.tabs.appendChild(newTabXML);

		addTab(newTabXML, getCurrentTabNavigator());
		
		//set tab focus
		getCurrentTabNavigator().selectedIndex = getCurrentTabNavigator().numChildren-1;
	}
	
	public function addNewTabToCurrentContext(address:String):void
	{
		addNewTabToContext(Context(contextTabBar.selectedChild), address);
	}
	
	public function addTabWithTabBarButton(e:Event):void
	{
		addNewTabToCurrentContext(homepage);
	}
		
	public function updateAddressBar(e:Event=null):void
	{
		var currentTab:Tab =  getCurrentTab();
			
		updateHistoryList();

		if(currentTab != null)
		{
		  addressInput.text = currentTab.htmlPane.location;
		  currentTab.xmlObject.@address = currentTab.htmlPane.location; 
		}
	}
	
	public function contextTabRenamed(e:SuperTabEvent):void
	{
		var context:Context = Context(contextTabBar.getChildAt(e.tabIndex));
		context.xmlRef.@label = context.label; 
	}
	
	private function xmlDeleteNode(xmlToDelete:XML):Boolean
	{
		var cn:XMLList = XMLList(xmlToDelete.parent()).children();
     
		for ( var i:Number = 0 ; i < cn.length() ; i++ )
		{
			if ( cn[i] == xmlToDelete )
			{
       			delete cn[i];       
				return true;
			}
		}    
		return false;
    
	}
	
	public function tabClose(e:flexlib.events.SuperTabEvent):void
	{
		if (SuperTabNavigator(e.target).getChildren().length <= 1)
			return;
			
		var t:Tab = Tab(SuperTabNavigator(e.target).getChildAt(e.tabIndex));
		var xml:XML = t.xmlObject;
		xmlDeleteNode(xml);
		t.xmlObject = null;
	}
	
	public function contextClose(e:flexlib.events.SuperTabEvent):void
	{
		if (SuperTabNavigator(e.target).getChildren().length <= 1)
			return;
		
		var c:Context = Context(SuperTabNavigator(e.target).getChildAt(e.tabIndex));
		var xml:XML = c.xmlRef;
		xml.@active = "false";
	}
	
	public function changeTabURLinFocus(address:String):void
	{
		var p:String = URLUtil.getProtocol(address);
		if (p == "")
			address = "http:\/\/" + address;
			
		getCurrentTab().htmlPane.location = address;
		getCurrentTab().xmlObject.@address = address;
	}
	
	private function addContext(lbl:String, xmlRef:XML):Context
	{
		if(lbl=="") lbl = "(Default)";

		var context:Context = new Context();
		context.label = lbl;
		context.xmlRef = xmlRef;
		context.setStyle("closable", true);
		if(icon) {
			context.icon = icon;
		}
		else {
			context.icon = document_icon;
		}
		
		contextTabBar.addChild(context);
		context.navigator.setType(SuperTabNavigator.TAB, contextMenuEventHandler);
		context.navigator.addEventListener(SuperTabNavigator.AddTabEvent, addTabWithTabBarButton);
		context.navigator.addEventListener(SuperTabEvent.TAB_CLOSE, tabClose);
		context.navigator.addEventListener(IndexChangedEvent.CHANGE, updateAddressBar);
		
		return context;
	}
	
	private function addTab(xmlObj:XML, navigator:SuperTabNavigator, icon:Class=null):Tab 
	{
		if(xmlObj==null)
		{
			xmlObj = new XML("<tab label=\"(untitled)\" address=\"" + homepage + "\" id=\"" + randNum().toString() +"\" />");
		}
		
		var tab:Tab = new Tab();
		tab.setStyle("closable", true);
		tab.label = xmlObj.@label;
		if(icon) {
			tab.icon = icon;
		}
		else {
			tab.icon = document_icon;
		}
		tab.addEventListener(Tab.locationChangedEvent, locationChanged);
		navigator.addChild(tab);
		tab.htmlPane.location = xmlObj.@address;
		tab.xmlObject = xmlObj;
		
		return tab;
	}
	
	public function locationChanged(e:Event):void
	{
		updateAddressBar();
	}
	
	
	/* this part is related to the quick info panel
	 * Tao Su
	 */
	 
	public function listMouseMove(event:Event):void
	{
		if (event.type != flash.events.MouseEvent.MOUSE_MOVE) return;
		currentListPos = flash.events.MouseEvent(event).stageY - 10;
			
	}
	
	public function floatPanelTimerTimeout(event:TimerEvent):void
	{
		floatPanel.visible = currentListIndex >=0 || onPanel;
		
		if (tempListData != null) currentListData = tempListData;

		if (currentListIndex >=0 && Math.abs(currentListPos - floatPanel.y)>10)
			floatPanel.move(sidebar.x + sidebar.width, currentListPos);
			
		if (currentListData != null && currentListData != previousListData)
		{
			var xml:XML = currentListData;
			
			var count:int = 1;
			if (xml.localName()=="context")
				count = xml.tabs.children().length();
			else if (xml.localName()=="tabs")
				count = xml.children().length();
			else if (xml.localName()=="bookmarks")
				count = xml.children().length();
			else
				count = 1;
			
			floatPanel.title = xml.@label + " (" + count + ")";
			
			textComment.data = xml.@comment;
			
			var axml:XML = xml;
				
			while (axml.attribute("address").length() == 0 && axml.children().length() > 0)
				axml = axml.children()[0];
				
			htmlPreviewPane.location = axml.@address;
			previousListData = currentListData;
		}

	}
		
	public function listMouseOver(event:Event):void
	{
		//if (event.type != flash.events.MouseEvent.MOUSE_OVER) return;
		//floatbox.visible = true;
	}
		
	public function listMouseOut(event:Event):void
	{
		//currentListIndex = -1;
		
		//floatPanelTimer.stop();
		//floatPanelTimer.start();

	}
		
	public function listItemRollOver(event:ListEvent):void 
	{
		if (event.type != mx.events.ListEvent.ITEM_ROLL_OVER) return;
		currentListIndex = event.rowIndex;
		
		var xml:XML = XML(event.itemRenderer.data);
		tempListData = xml;
		
			
		floatPanelTimer.stop();
		floatPanelTimer.start();
		
	}

	public function listItemRollOut(event:Event):void
	{
		if (event.type != mx.events.ListEvent.ITEM_ROLL_OUT) return;
		currentListIndex = -1;
		tempListData = null;
		
		floatPanelTimer.stop();
		floatPanelTimer.start();
				
    }
    
    public function commentChanged():void
    {
    	if (currentListData!=null && floatPanel.visible)
    		currentListData.@comment = textComment.text;
    }

	 
	/*
	 * end : quick info panel
	 */
	 
	/*
	 * Control tool bar functions 
	 */
	 
	public function currentPageBack():void
	{
		var currentTab:Tab =  getCurrentTab()
		if(currentTab != null)
		{
		  	currentTab.htmlPane.historyBack();
			updateHistoryList();
		}	
	}
	
	public function currentPageForward():void
	{
		var currentTab:Tab =  getCurrentTab()
		if(currentTab != null)
		{
		  currentTab.htmlPane.historyForward();
			updateHistoryList();
		}	
	}
	
	public function currentPageRefresh():void
	{
		var currentTab:Tab =  getCurrentTab()
		if(currentTab != null)
		{
		  currentTab.htmlPane.reload();
			updateHistoryList();
		}	
	}
	
	
	public function currentPageStop():void
	{
		var currentTab:Tab =  getCurrentTab()
		if(currentTab != null)
		{
		  currentTab.htmlPane.cancelLoad();
		}	
	}
	
	public function currentPageHome():void
	{
		changeTabURLinFocus(homepage);	
			updateHistoryList();
	}
	
	public function historyItemClick(e:MenuEvent):void
	{
		var currentTab:Tab =  getCurrentTab()
		if(currentTab != null)
		{
		  currentTab.htmlPane.historyGo(e.item.@pos - currentTab.htmlPane.historyPosition);
		}	
	}
	
	public function updateHistoryList():void
	{
		var currentTab:Tab =  getCurrentTab();
		
		// update history list besides address bar
		var currentHistory:XML = new XML("<history></history>");
		
		for (var i:int=0; i< currentTab.htmlPane.historyLength; i++)
		{
			var t:String = currentTab.htmlPane.getHistoryAt(i).title;
			if (i == currentTab.htmlPane.historyPosition)
				t = "* "+ t;
			else
				t = "  "+ t;
			currentHistory.appendChild(new XML("<historyItem label=\"" + t + "\" pos=\"" + i + "\"/>"));
		}
		
		backButton.dataProvider = currentHistory;
		forwardButton.dataProvider = currentHistory;
	}

	public function historyMenuOpen(e:Event):void
	{
		updateHistoryList();
	}
	
	/*
	 * end : control toolbar functions
	 */
]]>
</mx:Script>

	<mx:VBox paddingTop="10" paddingRight="10" paddingBottom="10" paddingLeft="10" width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
		<mx:HBox width="100%" height="25" horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<mx:Button label="Load Context" id="loadButton" click="downloadContext();"/>
			<mx:PopUpMenuButton icon="{backIcon}" id="backButton" click="currentPageBack();"
				labelField="@label" showRoot="false" itemClick="historyItemClick(event);"
				open="historyMenuOpen(event);" width="42"/>
			<mx:PopUpMenuButton icon="{forwardIcon}" id="forwardButton" click="currentPageForward();"
				labelField="@label" showRoot="false"  itemClick="historyItemClick(event);"
				open="historyMenuOpen(event);" width="42"/>
			
			<mx:Button icon="{refreshIcon}" id="refreshButton" click="currentPageRefresh();" width="25"/>
			<mx:Button icon="{stopIcon}" id="stopButton" click="currentPageStop();" width="25"/>
			<mx:Button icon="{homeIcon}" id="homeButton" click="currentPageHome();" width="25"/>
			<mx:TextInput width="100%" height="25" id="addressInput" enter="changeTabURLinFocus(addressInput.text);"/>
			<mx:Button icon="{goIcon}" width="25" click="changeTabURLinFocus(addressInput.text);"/>
		</mx:HBox>
		<mx:HDividedBox width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<mx:VDividedBox id="sidebar" width="150" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
				<mx:Accordion width="100%" height="100%" >
					<mx:Canvas label="Active" width="100%" height="100%">
						<mx:Tree id="treeActive" x="0" y="0" width="100%" height="100%" 
							dataProvider="{contexts.context.(@active == 'true')}"  
							labelField="@label"
							doubleClickEnabled="true"
							itemDoubleClick="activeTreeItemDoubleClicked(event)"
							itemRollOver="listItemRollOver(event)"
							itemRollOut="listItemRollOut(event)"
							mouseOver="listMouseOver(event)"
							mouseOut="listMouseOut(event)"
							mouseMove="listMouseMove(event)"
							itemRenderer="flexlib.controls.CustomTreeItemRenderer"
							dragEnabled="true"
							nativeDragStart="setupDragClipboardForTree(event);"
							/>
					</mx:Canvas>
				</mx:Accordion>
				<mx:Accordion width="100%" height="100%" >
					<mx:Canvas label="Inactive" width="100%" height="100%">
						<mx:Tree id="treeInactive" x="0" y="0" width="100%" height="100%" 
							dataProvider="{contexts.context.(@active == 'false')}" 
	                        labelField="@label" 
	                        doubleClickEnabled="true"
	                        itemDoubleClick="inactiveTreeItemDoubleClicked(event)"
							itemRollOver="listItemRollOver(event)"
							itemRollOut="listItemRollOut(event)"
							mouseOver="listMouseOver(event)"
							mouseOut="listMouseOut(event)"
							mouseMove="listMouseMove(event)"
							itemRenderer="flexlib.controls.CustomTreeItemRenderer"
							nativeDragStart="setupDragClipboardForTree(event);"
	                        />
					</mx:Canvas>
				</mx:Accordion>
			</mx:VDividedBox>
			<flexlib:SuperTabNavigator id="contextTabBar" scrollSpeed="25" dropShadowEnabled="true"
				stopScrollingEvent="{MouseEvent.MOUSE_OUT}" startScrollingEvent="{MouseEvent.MOUSE_OVER}"
				width="100%" height="100%" horizontalGap="0" editableTabLabels="true"
				closePolicy="{SuperTab.CLOSE_ALWAYS}" mouseMove="currentListIndex=-1; onPanel=false;"/>
		</mx:HDividedBox>
	</mx:VBox>
	
	<mx:Fade id="showFade" alphaFrom="0" alphaTo="1" duration="200"/>
	<mx:Fade id="hideFade" alphaFrom="1" alphaTo="0"  duration="200"/>
	<mx:Move id="moveTransit" />
	<mx:Panel id="floatPanel" x="73" y="-13"  visible="false" width="300" height="300" layout="absolute"
		showEffect="{showFade}" hideEffect="{hideFade}"  horizontalScrollPolicy="off" verticalScrollPolicy="off"
		mouseOver="onPanel=true;" mouseOut="onPanel=false;" moveEffect="{moveTransit}"
		>
		
		<mx:VBox id="floatPanelBox" width="100%" height="100%" >
			<mx:HTML id="htmlPreviewPane" width="100%" height="74%" 
				scaleX="0.25" scaleY="0.25"/>
			<mx:TextArea id="textComment" width="100%" height="25%" editable="true" borderThickness="0" keyUp="commentChanged();"/>
		</mx:VBox>
	</mx:Panel>
</mx:WindowedApplication>
